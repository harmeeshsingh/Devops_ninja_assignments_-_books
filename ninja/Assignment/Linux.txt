## ASSIGNMENT 1 : Basic Linux Commands

Create a utility(FileManager.sh) that will be able to
- Create a Directory
- Delete a Directory
- List Content of a Directory
- Only list files in a Directory
- Only listDirs in a Directory
- listAll(files and directory)


For example
```
./FileManager.sh addDir /tmp dir1
./FileManager.sh addDir /tmp dir2
./FileManager.sh addDir /tmp dir3
./FileManager.sh listFiles /tmp
./FileManager.sh listDirs /tmp
./FileManager.sh listAll /tmp
./FileManager.sh deleteDir /tmp dir3

```



Update FileManager to process Files as well
- Create a file
- Add content to file
- Add conent at the begining of the file
- Show top n lines of a file
- Show last n lines of a file
- Show contents of a specific line number
- Show conteint of a specfific line number range
- Move/Copy file from one location to another
- Delete file

For example
```
./FileManager.sh addFile /tmp/dir1 file1.txt
./FileManager.sh addFile /tmp/dir1 file1.txt "Initial Content"
./FileManager.sh addContentToFile /tmp/dir1 file1.txt "Additional Content"
./FileManager.sh addContentToFileBegining /tmp/dir1 file1.txt "Additional Content"
./FileManager.sh showFileBeginingContent /tmp/dir1 file1.txt 5
./FileManager.sh showFileEndContent /tmp/dir1 file1.txt 5
./FileManager.sh showFileContentAtLine /tmp/dir1 file1.txt 10
./FileManager.sh showFileContentForLineRange /tmp/dir1 file1.txt 5 10
./FileManager.sh moveFile /tmp/dir1/file1.txt /tmp/dir1/file2.txt
./FileManager.sh moveFile /tmp/dir1/file2.txt /tmp/dir2/
./FileManager.sh copyFile /tmp/dir2/file2.txt /tmp/dir1/
./FileManager.sh copyFile /tmp/dir1/file2.txt /tmp/dir1/file3.txt
./FileManager.sh clearFileContent /tmp/dir1 file3.txt
./FileManager.sh deleteFile /tmp/dir1 file2.txt

```
Note: Do not use sed command.Try to do this assignment only with linux basic commands


ASSIGNMENT 2
Please find your assignment for today (Day2)
	UserManager utility
	Add NinjaTeam (Simulate Group) ex: team1
	Add a User (Simulate) under a team ex: Nitish added to team1
	Ensure below constraints are met:
	A user should have read,write, execute access to home directory
	All the users of same team should have read and excute access to home directory of fellow team members.
	others should have only execute permission to userâ€™s home directory
	In home directory of every user there should be 2 shared directories
	team: Same team members will have full access
	ninja: All ninja's will have full access
```       
i.e
./UserManager.sh addTeam amigo
./UserManager.sh addTeam unixkings
./UserManager.sh addUser Rakesh amigo
./UserManager.sh addUser Sandeep unixkings
Resultant Structure
/home
	Rakesh
	team
	ninja
	Sandeep
	team
	ninja
```
##  Additional Features
	change user Shell
	change user password
	Delete user
	Delete Group
	list user or Team
```   
i.e
./UserManager.sh delTeam amigo
./UserManager.sh delUser Rakesh
./UserManager.sh changePasswd Rakesh
./UserManager.sh changeShell Rakehs /bin/bash
./UserManager.sh ls User
./UserManager.sh ls Team
# ASSIGNMENT 3
## Part A
Please find your assignment for today 

Create a shell script to generate a star, it will take 2 arguments size & type
```
./drawStar.sh 5 t1
    *
   **
  ***
 ****
*****
```

```
./drawStar.sh 5 t2
*
**
***
****
*****
```

```
./drawStar.sh 5 t3
    *
   ***
  *****
 *******
*********
```

```
./drawStar.sh 5 t4
*****
****
***
**
*
```

```
./drawStar.sh 5 t5
*****
 ****
  ***
   **
    *
```

```
./drawStar.sh 5 t6
*********
 *******
  *****
   ***
    *
```

```
./drawStar.sh 5 t7
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
```

## Part B
Create a shell script that will take take a number and print below output depending on the conditions
- tom -> If number is divisible by 3
- cat -> If number is divisible by 5
- tomcat -> If number is divisible by 15
```
i.e
./printTomcat.sh 7

./printTomcat.sh 6
tom

./printTomcat.sh 10
cat

./printTomcat.sh 30
tomcat
```








ASSIGNMENT 4
Create a utility otssh, this utility will have below features

1. add ssh connect
2. list ssh connection
3. update ssh connection
4. delete ssh connection
5. Connect


1. Add ssh connection

$ otssh -a -n server1 -h 192.168.21.30 -u kirti (add user kirti to connect 192.168.21.30 with name server1 with default ssh setting)
$ otssh -a -n server2 -h 192.168.42.34 -u kirti -p 2022 (add user kirti to connect 192.168.42.34 with name server2 with port 2022 and default ssh setting)
$ otssh -a -n server3 -h 192.168.46.34 -u ubuntu -p 2022 -i ~/.ssh/server3.pem (add user ubuntu to connect 192.168.46.34 with name server3 with port 2022 and ssh key file ~/.ssh/server3.pem and default ssh setting)




2. List ssh connection

i.e 
$ otssh ls (This should list the name of all connection added using utility)
server1
server2
server3
$ otssh ls -d (This should list the name of all connection with details added using utility)
server1: ssh user@server1
server2: ssh -p 2022 user@server2
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3




3. Update ssh connection (This should update the settings for connection mentioned after name)

$ otssh -u -n server1 -h server1 -u user1
$ otssh -u -n server2 -h server2 -u user2 -p 2022

$ otssh ls -d
server1: ssh user1@server1
server2: ssh -p 2022 user2@server2
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3



4. Delete ssh connection (This should Delete the mentioned connection)

$ otssh rm server1
$ otssh rm server2

$ otssh ls -d
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3

5. Connect to server (This should connect to the server mentioned with details added using utility)

$ otssh server1
[ERROR]: Server information is not available, please add server first
$ otssh server2
[ERROR]: Server information is not available, please add server first
$ otssh server3
Connecting to server3 on 2022 port as user3 via ~/.ssh/server3.pem key





# ASSIGNMENT 5
## Part A

Create a template engine, that can generate values file and replace the variables provided as arguments
```
./teplateEngine.sh template.file key1=value1 key2=value2....
```

trainer.template
```
{{fname}} is trainer of {{topic}} 
```
```
i.e 
./teplateEngine.sh <template file> fname=sandeep topic=linux

sandeep is trainer of linux 
```

## Part B
Create a text editor utility, using which you can

- Add a line at top
- Add a line at bottom
- Add a line at specific line number
- Replace word
- Delete word
- Insert word
- Delete a line
- Delete a line containeing a word

```
./otTextEditor addLineTop <file> <line>
./otTextEditor addLineBottom <file> <line>
./otTextEditor addLineAt <file> <linenumber> <line>
./otTextEditor updateFirstWord <file> <word> <word2>
./otTextEditor updateAllWords <file> <word> <word2>
./otTextEditor insertWord <file> <word1> <word2> <word to be inserted>
./otTextEditor deleteLine <file> <line no>
./otTextEditor deleteLine <file> <line no> <word>
```
Also come with your own features of text editor


ASSIGNMENT 6
Part A
Please find your assignment for today
	Create a process management utility, to find
	Top n process by memory
	Top n process by cpu
	Kill process having least priority
	running duration of a process by name or pid
	List orphan process if any
	List zoombie process if any
	Kill process by name or pid
	List process that are waiting for the resources
i.e.
./ otProcessManager topProcess 5 memory
./ otProcessManager topProcess 10 cpu
./ otProcessManager killLeastPriorityProcess 
./ otProcessManager RunningDurationProcess <processName>/<processID>
./ otProcessManager listOrphanProcess
./ otProcessManager listZoombieProcess
./ otProcessManager killProcess <processName>/<processID>
./ otProcessManager ListWaitingProcess
Part B
Process Manager utility
	Create a ProcessManager utility that will perform below operation:
	register a service which it will start as a daemon service( it will register script path and one alias to this service)
	start a particular service
	show the status of particular service(shows whether a service is running or not)
	stop a particular service
	change the priority of any service
	list the details of particular service started by this utility
i.e.
./ProcessManager.sh -o register -s <path> -a <alias> -> Register Process
./ProcessManager.sh -o start -a <alias> -> Start Process
./ProcessManager.sh -o status  -a <alias> -> status of  processes
./ProcessManager.sh -o kill -a <alias> -> Kill process
./ProcessManager.sh -o priority -p <low/med/high> -a <alias> -> change priority
./ProcessManager.sh -o list  
output:
service2
service1
service3
./ProcessManager.sh -o top [-a <alias>] -> List process details
output:
 alias, PID, State, Priority, Script
Part C
	Let's play around with process:
	clear a log file of running process
	delete a log file of running process and see what happens to process
	elevate the priority of a process



## Git Assignment 7

#=======================================================================
## PART A
#=======================================================================

- Create a folder ninja at the root level of your cloned code
- Add a file README.md with content "Trying fast forward merge" in  ninja folder
- Create a branch ninja and move to it
- Run git status command
- Commit your changes to ninja branch
- Merge ninja branch to master branch make sure that a new commit get's created
- Assuming you are in the master branch, modify README.md with content "Changes in master branch", commit the changes in master branch.
- Switch to ninja branch, modify README.md with content "Changes in ninja branch", commit the changes in ninja branch.
- Merge the ninja branch to the master branch in such a fashion that a merge conflict is generated and resolve it using the ours and theirs concept so that the changes of the ninja branch overrides changes in master branch.

## Good To Do
- Simulate the above scenarios using rebase

#=======================================================================
## PART B
#=======================================================================

- Write a script to manage branches
    - Must
        - List branches
        - Create branch
        - Delete branch
        - Merge 2 branches
        - Rebase 2 branches
e.g:
```
./gitBranches.sh  -l 

output: 
master 
ninja

./gitBranch.sh -b <branch_name>
./gitBranch.sh -d <branch_name>
./gitBranch.sh -m -1 <branch_name1> -2 <branch_name2> ----> which means branch_name1 branch is going to merge into branch_name2 branch 
./gitBranch.sh -r -1 <branch_name1> -2 <branch_name2>---- which means branch_name1 branch is going to rebase on branch_name2 branch
```
#=======================================================================
## PART C
#=======================================================================
- Write a script to manage tags
    - Must
        - Create tag
        - List tags
        - Delete tag
e.g:        
```
./gitTags.sh  -t <tag_name>
./gitTags.sh  -t ninja_1.0
./gitTags.sh  -t ninja_1.1
./gitTags.sh  -l 
output :
ninja_1.0
ninja_1.1
./gitTags.sh  -d <tag_name>
./gitTags.sh  -d ninja_1.0
````
#=======================================================================
## PART D
#=======================================================================
- Write a script to generate commit report of a repo
    - Input
        - Repo url
        - days for which report to be generated
    - Output
        - Commit Id
        - Author name
        - Autoher EMail
        - Commit Message
        - Changed Files lists
    - Must Do
        - Report in html or csv format
    - Optional
        - An additional column showing if commit is valid or not
            - A commit is valide if it starts with pattern JIRA-XXXX: 
        
e.g :
```     
./gitCommitReport.sh -u <url> -d <days>
./gitCommitReport.sh -u https://github.com/opstree/spring3hibernate.git -d 40 
```
output:
```
Fri Dec 9 15:49:41 2022 +0530 | Sandeep | sandeep@opstree.com | Updated path to correct value
Sat Dec 3 10:28:04 2022 +0530 | Sandeep Rawat | sandeep@opstree.com | Merge pull request #40 from opstree/msk-tf-files
Fri Dec 2 18:16:18 2022 +0530 | priyanshichauhan0707 | priyanshichauhan0707@gmail.com | renamed data_network.tf
Fri Dec 2 17:52:09 2022 +0530 | priyanshichauhan0707 | priyanshichauhan0707@gmail.com | added _override.tf, backend.tf and data.tf
Fri Dec 2 11:59:55 2022 +0530 | Sandeep | sandeep@opstree.com | Added capability to fetch & store state in S3



# Assignment 8
Create a utility to manage build operations of a maven based java project such as:
- Mandatory
   - Genreate the artifact of project
   - Upload the artifact of project to local repo
   - Perform static code analysis of project using any of the tool, which will be provided as an argument in commandline
       - checkstyle
       - findbugs
       - pmd
       - Perform unit test case analysis of the project and let user give an option to either generate report in csv/xml/html for
            - Unit tests status
            - code coverage status
   - deploy the artifact to websever(tomcat)         
- Optional
   - Generate documentation of an  application
   - Update build definition to fail build if various thresholds are not met in 
      - checkstyle
      - findbugs
      - pmd
      - code coverage
Repo link : https://github.com/opstree/spring3hibernate.git
i.e 
./buildMaven.sh -a 
./buildMaven.sh -i 
./buildMaven.sh -s checkstyle
./buildMaven.sh -s findbugs
./buildMaven.sh -s pmd
./buildMaven.sh -t <unit_test_plugin_name>
./buildMaven.sh -d 
flag help
a : to generate a artifact
i : to install the artifact to local repo 
s : to do  any static code analysis 
t : to do any unit testing
d : to deploy the artifact